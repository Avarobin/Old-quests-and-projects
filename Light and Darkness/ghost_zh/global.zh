// ghost.zh
// Version 2.7.2

void StartGhostZH()
{
    InitializeGhostZHData();
}

void UpdateGhostZH1()
{
    UpdateEWeapons();
    CleanUpGhostFFCs(); // Only needed if __GH_USE_DRAWCOMBO is 0
    UpdateGhostZHData1();
}

void UpdateGhostZH2()
{
    DrawGhostFFCs();
    AutoGhost();
    UpdateGhostZHData2();
}

void InitializeGhostZHData()
{
    __ghzhData[__GHI_GLOBAL_FLAGS]=0;
    __ghzhData[__GHI_FLASH_COUNTER]=0;
    __ghzhData[__GHI_SHADOW_FRAME]=0;
    __ghzhData[__GHI_SHADOW_TIMER]=0;
    __ghzhData[__GHI_LARGE_SHADOW_FRAME]=0;
    __ghzhData[__GHI_LARGE_SHADOW_TIMER]=0;
    __ghzhData[__GHI_CLOCK_TIMER]=0;
}


void UpdateGhostZHData1()
{
    // Update the clock
    
    // Check for screen change first
    int screen=(Game->GetCurDMap()<<8)+Game->GetCurDMapScreen();
    if(__ghzhData[__GHI_PREV_SCREEN]!=screen) // Changed screens, end clock
    {
        __ghzhData[__GHI_CLOCK_TIMER]=0;
        __ghzhData[__GHI_PREV_SCREEN]=screen;
    }
    
    // Same screen, count down
    else if(__ghzhData[__GHI_CLOCK_TIMER]>0)
        __ghzhData[__GHI_CLOCK_TIMER]--;
}


void UpdateGhostZHData2()
{
    // Update the flash counter and toggle the flicker flag
    __ghzhData[__GHI_FLASH_COUNTER]=(__ghzhData[__GHI_FLASH_COUNTER]+1)%8;
    if((__ghzhData[__GHI_GLOBAL_FLAGS]&__GHGF_FLICKER)==0)
        __ghzhData[__GHI_GLOBAL_FLAGS]|=__GHGF_FLICKER;
    else
        __ghzhData[__GHI_GLOBAL_FLAGS]&=~__GHGF_FLICKER;
    
    // Update shadow animation
    if(GH_SHADOW_FRAMES>1)
    {
        __ghzhData[__GHI_SHADOW_TIMER]++;
        if(__ghzhData[__GHI_SHADOW_TIMER]>=GH_SHADOW_ANIM_SPEED)
        {
            __ghzhData[__GHI_SHADOW_TIMER]=0;
            __ghzhData[__GHI_SHADOW_FRAME]=
              (__ghzhData[__GHI_SHADOW_FRAME]+1)%GH_SHADOW_FRAMES;
        }
    }
    if(GH_LARGE_SHADOW_FRAMES>1)
    {
        __ghzhData[__GHI_LARGE_SHADOW_TIMER]++;
        if(__ghzhData[__GHI_LARGE_SHADOW_TIMER]>=GH_LARGE_SHADOW_ANIM_SPEED)
        {
            __ghzhData[__GHI_LARGE_SHADOW_TIMER]=0;
            __ghzhData[__GHI_LARGE_SHADOW_FRAME]=
              (__ghzhData[__GHI_LARGE_SHADOW_FRAME]+1)%GH_LARGE_SHADOW_FRAMES;
        }
    }
}

// Calls UpdateEWeapon() on every eweapon on the screen
void UpdateEWeapons()
{
    eweapon wpn;
    
    // Only update behavior if Link isn't holding up an item.
    if(!(Link->Action==LA_HOLD1LAND || Link->Action==LA_HOLD2LAND ||
         Link->Action==LA_HOLD1WATER || Link->Action==LA_HOLD2WATER))
   {
        for(int i=Screen->NumEWeapons(); i>0; i--)
        {
            wpn=Screen->LoadEWeapon(i);
            
            // If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
            if((wpn->Misc[__EWI_FLAGS]&__EWFI_IS_GHZH_EWPN)==0 ||
               (wpn->Misc[__EWI_FLAGS]&__EWFI_DUMMY)!=0)
                continue;

        
            UpdateEWeapon(wpn);
        }
   }
   
   // If he is, just update appearance-related flags.
   else
   {
        for(int i=Screen->NumEWeapons(); i>0; i--)
        {
            wpn=Screen->LoadEWeapon(i);
            
            // If this is a dummy, or if it's not a ghost.zh weapon, don't do anything
            if((wpn->Misc[__EWI_FLAGS]&__EWFI_IS_GHZH_EWPN)==0 ||
               (wpn->Misc[__EWI_FLAGS]&__EWFI_DUMMY)!=0)
                continue;

        
            __UpdateEWeaponVisualFlags(wpn);
        }
   }
}


// Hides enemy FFCs when Link dies
void CleanUpGhostFFCs()
{
    // Hide FFCs when Link is dead
    if(Link->HP<=0 && __GH_USE_DRAWCOMBO==0)
    {
        ffc f;
        for(int i=1; i<=32; i++)
        {
            f=Screen->LoadFFC(i);
            if((__Ghost_Scripts[f->Script>>4]&(1<<(f->Script&1111b)))!=0)
                f->Data=0;
        }
    }
}


// Detects AutoGhost enemies and sets up FFCs for them
void AutoGhost()
{
    // Shouldn't run if scripts are suspended.
    if((__ghzhData[__GHI_GLOBAL_FLAGS]&__GHGF_SUSPEND)!=0)
        return;
    
    npc enemy;
    int ffcID=0;
    ffc f;

    // Search enemies for one that should be autoghosted
    for(int i=Screen->NumNPCs(); i>0; i--)
    {
        enemy=Screen->LoadNPC(i);

        // ID out of range??
        if(enemy->ID<AUTOGHOST_MIN_ENEMY_ID || enemy->ID>AUTOGHOST_MAX_ENEMY_ID)
            continue;

        // Already in use?
        if((enemy->Misc[__GHI_NPC_DATA]&0x10000)!=0)
            continue;

        // No combo or script set?
        if(enemy->Attributes[10]==0 || enemy->Attributes[11]==0)
            continue;

        // Found an enemy that needs ghosted; now find an FFC
        ffcID=FindUnusedFFC(ffcID);

        // No suitable FFC? Kill the enemy, then
        if(ffcID==0)
        {
            // It won't die immediately, so mark it as used so it isn't
            // checked again
            enemy->Misc[__GHI_NPC_DATA]=0x10000;
            enemy->X=256;
            enemy->Y=176;
            enemy->ItemSet=0;
            enemy->HP=-1000;
        }
        // Found an FFC; set it up
        else
        {
            int scriptNum;
            
            f=Screen->LoadFFC(ffcID);
            f->Data=GH_INVISIBLE_COMBO;
            f->CSet=enemy->CSet;
            f->TileWidth=1;
            f->TileHeight=1;
            f->X=enemy->X;
            f->Y=enemy->Y-enemy->Z;
            f->Vx=0;
            f->Vy=0;
            f->Ax=0;
            f->Ay=0;

            // Setting this in advance hides the spawn animation, so it's not
            // visible for a single frame before the script starts (assuming
            // this is after Waitdraw())
            if(enemy->Attributes[10]!=GH_INVISIBLE_COMBO &&
               enemy->Attributes[10]!=__GH_INVISIBLE_ALT)
                enemy->Extend=3;
            
            if(enemy->Attributes[11]>0)
                scriptNum=enemy->Attributes[11];
            else if(enemy->Attributes[11]==AUTOGHOST_READ_NAME)
                scriptNum=__AutoGhostReadScript(enemy);
            
            if(scriptNum>0 && scriptNum<=511)
            {
                f->Script=scriptNum;
                f->InitD[0]=enemy->ID;
            }
            else // Invalid script? Kill the enemy
            {
                enemy->Misc[__GHI_NPC_DATA]=0x10000;
                enemy->X=256;
                enemy->Y=176;
                enemy->ItemSet=0;
                enemy->HP=-1000;
            }
        }
    }
}


// Reads the enemy's name to get the script name; returns the number of the
// script or -1 if there's a problem
int __AutoGhostReadScript(npc enemy)
{
    int npcName[64];
    int scriptName[64];
    int i;
    int j;
    int scriptNum;
    
    enemy->GetName(npcName);
    
    // Find the script name delimiter
    i=0;
    while(npcName[i]!=AUTOGHOST_DELIMITER && npcName[i]!=0)
        i++;
    
    // Didn't find it?
    if(npcName[i]==0)
    {
        int error1[]="ghost.zh: AutoGhost setup failed - script not found.\n";
        int error2[80]="  Enemy name: %s\n";
        int error3[55]="  Script name should start after this character: %c\n";
        printf(error1);
        printf(error2, npcName);
        printf(error3, AUTOGHOST_DELIMITER);
        return -1;
    }
    
    // Copy characters until a space or the end of the string
    i++;
    j=0;
    while(npcName[i]!=0 && npcName[i]!=32)
    {
        scriptName[j]=npcName[i];
        i++;
        j++;
    }
    
    scriptName[j+1]=0;
    scriptNum=Game->GetFFCScript(scriptName);
    
    // Script doesn't exist?
    if(scriptNum==-1)
    {
        int error1[]="ghost.zh: AutoGhost setup failed - script not found.\n";
        int error2[80]="  Enemy name: %s\n";
        int error3[80]="  Script name: %s\n";
        printf(error1);
        printf(error2, npcName);
        printf(error3, scriptName);
    }
    
    return scriptNum;
}

